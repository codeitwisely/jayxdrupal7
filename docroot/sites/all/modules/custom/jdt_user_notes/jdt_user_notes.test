<?php
/**
 * @file
 * jdt_user_notes.test
 * We declare the class extending from DrupalWebTestCase.
 */
class JdtUserNotesTestCase extends DrupalWebTestCase {

/**
 * Impelements getInfo().
 */
public static function getInfo() {
    return array(
      'name' => 'Jdt User Notes Test',
      'description' => 'Testing CRUD Operations',
      'group' => 'Jdt User Notes',
    );
}

/**
 * Implements setUp().
 **/
public function setUp() {
// Enable any modules required for the test. This should be an array of
// module names.
  parent::setUp(array('jdt_user_notes'));
  // Create and log in our privileged user.
  $this->privileged_user = $this->drupalCreateUser(array(
    'create simpletest_example content',
    'extra special edit any simpletest_example',
  ));
  $this->drupalLogin($this->privileged_user);
}

/**
 * Implements drupalCreateAdminUser(array $permissions = array())
 * Create user with administrative credentials.
 */
public function drupalCreateAdminUser(array $permissions = array()) {
  $roles = user_roles();
  $index = array_search('administrator', $roles);
  $user = $this->drupalCreateUser($permissions);
  $user->roles[$index] = 'administrator';
  return user_save($user);
}

/**
 * Implements testJdtUserNotesCreate().
 * Tests creation of a Simpletest example node.
 */
public function testJdtUserNotesCreate() {
  // Create node to edit.
  $edit = array();
  $edit['note_text'] = $this->randomName(30);
  $edit['article_nid'] = 21;
  $edit['author_uid'] = 1;
  $this->drupalPost('node/add/simpletest-example', $edit, t('Save'));
  $this->assertText(t('Simpletest Example Node Type @note_text has been created.', array('@note_text' => $edit['note_text'])));
}


/**
 *
 */
public function testJdtUserNotes() {
// Load Entries Check for 1
  $result =  jdt_user_notes_entry_load();
  $this->assertEqual(
    count($result),
      1,
      '1 entry founded.'
  );
  // We add a New entry and test if the number exists.
  // Creating Entry.
  $entry = array(
    'note_text' => 'Second text',
  );

  jdt_user_notes_insert($entry);
  $result = jdt_user_notes_entry_load();
  $this->assertEqual(
    count($result),
    2,
    '2 entries founded.'
  );

  // Deleting Entries.
  $result = jdt_user_notes_entry_load(array('note_text' => 'My first Note1'));
  $this->assertEqual(
    count($result),
    1,
    '1 Entry found with the note My first Note1'
  );

  $entry= (array)end($result);
  $this->assertEqual(
    $entry['note_text'],
    'My first Note1',
    'My first Note1 founded'
  );
  jdt_user_notes_delete($entry);
  $result = jdt_user_notes_entry_load();
  $this->assertEqual(
    count($result),
    3,
    '3 entries founded.'
  );

  // Updating Entries.
  $result = jdt_user_notes_entry_load(array('note_text' => 'My second Note2'));
  $this->assertEqual(
    count($result),
    1,
    '1 Entry founded with My second Note2'
  );

  // Geting the entry.
  $entry = (array)end($result);
  // Change note to My fifth Note 5.
  $entry['note_text'] = 'My fifth Note 5';
  // Update entry in Database
  jdt_user_notes_update((array) $entry);
  $result = jdt_user_notes_entry_load(array('note_text' => 'My fifth Note 5'));
  $this->assertEqual(
    count($result),
    1,
    'Found one entry with My fifth Note 5'
  );
}
}
