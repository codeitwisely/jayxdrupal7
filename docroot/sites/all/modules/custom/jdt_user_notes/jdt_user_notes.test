<?php

/**
 * @file
 * Tests for CRUDS Functions used for the jdt_user_notes module.
 */

class JdtUserNotesTestCase extends DrupalWebTestCase {
  //The user to who we'll give privileges for the tests
  protected $privileged_user;

  public static function getInfo() {
    return array(
      'name' => 'Jdt user notes test of CRUD functions',
      'description' => 'Ensure that the CRUD functions work',
      'group' => 'Jdt user notes',
    );
  }

  public function setUp() {
    // Enable any modules required for the test. This should be an array of
    // module names.
    parent::setUp(array('jdt_user_notes'));
    // Create and log in our privileged user.
    $this->privileged_user = $this->drupalCreateUser(
      array(
        'view user notes',
        'add user notes',
        'edit own user notes',
        'edit any user notes',
        'delete own user notes',
        'delete any user notes',
      )
    );
    $this->drupalLogin($this->privileged_user);
  }

  public function testJdtUserNotesCreate() {
    $entry = array(
      'article_nid' => 63,
      'author_uid' => 1,
      'note_text' => 'Here is the first test',
    );
    $note = _jdt_user_notes_create_note($entry);
    $this->assertText(t('Note for @article_nid has been created.', array('@article' => $edit['article'])));

    // For debugging, we might output the node structure with $this->verbose()
    $this->verbose('Note created: ' . var_export($node, TRUE));
    // $this->drupalCreateNode(array('type' => 'blog', 'uid' => $this->privileged_user->uid));
    // $this->drupalLogin($this->privileged_user);

    // $this->drupalGet('blog/' . $this->privileged_user->uid);
    // $this->assertResponse(200);
    // $this->assertTitle(t("@name's blog", array('@name' => format_username($this->privileged_user))) . ' | Drupal', 'Blog title was displayed');
    // $this->assertText(t('You are not allowed to post a new blog entry.'), 'No new entries can be posted without the right permission');
  }
}
