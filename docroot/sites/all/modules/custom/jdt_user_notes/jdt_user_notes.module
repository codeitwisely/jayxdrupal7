<?php
/**
 * @file
 * jdt_user_notes.module
 * This file includes hooks for permissions and other.
 */

/**
 * Implements hook_permission().
 * @return
 *   Array of permissions.
 */
function jdt_user_notes_permission() {
  return array(
    'view user notes' => array(
      'title' => t('View any user note'),
      'description' => t('View any published user notes.'),
    ),
    'add user notes' => array(
      'title' => t('Create new user note'),
      'description' => t('Add user notes.'),
    ),
    'edit own user notes' => array(
      'title' => t('Edit own user note'),
      'description' => t('Edit own user notes.'),
    ),
    'edit any user notes' => array(
      'title' => t('Edit any user note'),
      'description' => t('Edit any user notes.'),
    ),
    'delete own user notes' => array(
      'title' => t('Delete own user note'),
      'description' => t('Delete own user notes.'),
    ),
    'delete any user notes' => array(
      'title' => t('Delete any user note'),
      'description' => t('Delete any user notes.'),
    ),
  );
}

/**
 * Implements hook_menu().
 * @return
 *   Array of items.
 */
function jdt_user_notes_menu() {
  $items['jdt-user-notes/%jdt_user_notes/view'] = array(
    'title' => 'View',
    'access callback' => TRUE,
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -2,
  );
  $items['jdt-user-notes/%node/add'] = array(
    'title' => 'Add new note to an article',
    'page callback' => 'drupal_get_form',
    'access arguments' => array('add user notes'),
    'page arguments' => array('_jdt_user_notes_add_form', 1),
  );
  $items['jdt-user-notes/%jdt_user_notes/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_jdt_user_notes_edit_form', 1),
    'access arguments' => array('edit own user notes'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['jdt-user-notes/%jdt_user_notes/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_jdt_user_notes_delete_form', 1),
    'access arguments' => array('delete own user notes'),
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

function jdt_user_notes_load($note_id)
{
  return db_query('SELECT note_id, article_nid, author_uid, note_text FROM {jdt_user_notes} WHERE note_id = :note_id', array(':note_id' => $note_id))->fetchObject();
}

function jdt_user_notes_add_item_page()
{
  $item = new StdClass;
  $item->rid = FALSE;
  $item->my_field = '';

  return drupal_get_form('_jdt_user_notes_add_form_definition', $item);
}

function _jdt_user_notes_edit_form($form, &$form_state, $note) {

  $user_id = _jdt_user_notes_get_current_user_id();
  $form['#item'] = $note;
  $article_id = $note->article_nid;
  $default_value_note = jdt_user_notes_note_exists($article_id, $user_id);
  $default_note_id = jdt_user_notes_note_id($article_id, $user_id);

  $form['note_text'] = array(
    '#type' => 'textfield',
    '#title' => t('Note'),
    '#required' => TRUE,
    '#default_value' => $default_value_note,
  );

  // Grab value for node id and make it part of the form state.
  // so you can use it later.
  $form['article_nid'] = array(
    '#type' => 'value',
    '#value' => $note->article_nid,
  );

  // Make User ID available to the form.
  $form['author_uid'] = array(
    '#type' => 'value',
    '#value' => $note->author_uid,
  );
  // Make User ID available to the form.
  $form['note_id'] = array(
    '#type' => 'value',
    '#value' => $default_note_id,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save Note'),
  );
  $form['#submit'][] = '_jdt_user_notes_edit_form_submit_handler';
  return $form;
}

function _jdt_user_notes_edit_form_submit_handler($form, &$form_state)
{
  $note = $form['#item'];
  $note_id = $note->note_id;
  $article_nid = $form_state['values']['article_nid'];
  $author_uid = $form_state['values']['author_uid'];
  $note_text = $form_state['values']['note_text'];
  $entry = array(
    'note_id' => $note_id,
    'article_nid' => $article_nid,
    'author_uid' => $author_uid,
    'note_text' => $note_text
  );
  if(isset($note->note_id) && $note->note_id) {
    dpm($entry);
    module_load_include('inc', 'jdt_user_notes', 'jdt_user_notes.crud');
    $update = _jdt_user_notes_updt_note($entry);
    if ($update == 1 ) {
      $form_state['redirect'] = '<front>';
      drupal_set_message(t('The note has been updated'), 'status');
    }
    else {
      drupal_set_message(t('The note can\'t be updated'), 'error');
    }
  }
}

function jdt_user_notes_view_item_page($note) {
  $page['jdt_user_notes_item_page'] = array
  (
    '#markup' => t('The value of the item is <em>@value</em>', array('@value' => $note->note_text)),
    '#prefix' => '<p>',
    '#suffix' => '</p>',
  );

  return $page;
}

function _jdt_user_notes_delete_form($form, &$form_state, $note) {
  $form['#item'] = $note;
  $form['header'] = array(
    '#markup' => t('Are you sure you wish to delete the note with the note_id <em>@value</em>?', array('@value' => $note->note_id)),
    '#prefix' => '<h2>',
    '#suffix' => '</h2>',
  );
  $form['warning'] = array(
    '#markup' => t('Warning, this action cannot be undone'),
    '#prefix' => '<p>',
    '#suffix' => '</p>',
  );
  $form['delete_button'] = array(
    '#type' => 'submit',
    '#value' => t('Delete item'),
  );
  return $form;
}

function jdt_user_notes_item_delete_form_submit($form, &$form_state) {
  if($form_state['values']['op'] == $form_state['values']['delete_button']) {
    $note = $form['#item'];
    $note_id = $note->note_id;
    module_load_include('inc', 'jdt_user_notes', 'jdt_user_notes.crud');
    _jdt_user_notes_del_note($note_id);
  }
  $form_state['redirect'] = '<front>';
  drupal_set_message(t('The item has been deleted'));
}

/**
* Grab Note from the database.
*/
function jdt_user_notes_note_exists($article_nid, $author_uid) {
// Grab values from the database.
// Populate default value with the value stored.
// in the database.
  $result = db_select('jdt_user_notes', 'jun')
    ->fields('jun')
    ->condition('article_nid', $article_nid, "=")
    ->condition('author_uid', $author_uid, "=")
    ->execute()
    ->fetchAssoc();
  if (isset($result['note_text'])) {
    return $result['note_text'];
  }
  return '';
}
/**
* Grab Note Id from the database.
*/
function jdt_user_notes_note_id($nid, $uid) {
  $result = db_select('jdt_user_notes', 'jun')
    ->fields('jun')
    ->condition('article_nid', $nid, "=")
    ->condition('author_uid', $uid, "=")
    ->execute()
    ->fetchAssoc();
    return $result['note_id'];
  }

/**
 * Custom function to add a new user note to the database.
 * @param
 *   $form.
 * @param
 *   $form_state.
 * @return
 *   Form.
 */

function _jdt_user_notes_add_form($form, &$form_state) {

  $form['article_nid'] = array(
    '#type' => 'textfield',
    '#title' => t('Article'),
    '#size' => 30,
    '#maxlength' => 100,
    '#type' => 'hidden',
  );

  $form['author_uid'] = array(
    '#type' => 'textfield',
    '#title' => t('Authored by'),
    '#size' => 30,
    '#maxlength' => 100,
    '#default_value' => _jdt_user_notes_get_current_user(),
    '#required' => TRUE,
    '#type' => 'hidden',
    '#disabled' => TRUE,
  );

  $form['note_text'] = array(
      '#type' => 'textarea',
      '#title' => 'Note text',
      '#cols' => 60  ,
      '#rows' => 5,
      '#maxlength' => 100,
      '#required' => TRUE,
  );

  // now I add also a button
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Add user note'),
  );

  $form['#submit'][] = '_jdt_user_notes_submit_handler';
  return $form;
}

/**
 * Add the data to be insert on the table.
 * @param
 *   $form.
 * @param
 *   $form_state.
 */
function _jdt_user_notes_submit_handler($form, &$form_state) {

  $error = 1;
    if ( !isset($form_state['values']['note_text']) || $form_state['values']['note_text'] > 0) {
    $error = 0 ;
  }

  if ($error) {
    $article_id = _jdt_user_notes_get_article_id($form_state['values']['article_nid']);
    $author_id = _jdt_user_notes_get_user_id($form_state['values']['author_uid']);
    $text = $form_state['values']['note_text'];
    $entry = array(
        'article_nid' => $article_id,
        'author_uid' => $author_id,
        'note_text' => $text,
    );
    module_load_include('inc', 'jdt_user_notes', 'jdt_user_notes.crud');
    $add = _jdt_user_notes_create_note($entry);

    if ($add) {
      drupal_set_message(t('Note has been added!'));
      drupal_goto('<front>');
    }
    else {
      drupal_set_message(t('Record can\'t be added!'), 'warning');
    }
  }
}

/**
 * Get the uid of the current user.
 * @return
 *   Current user uid
 */
function _jdt_user_notes_get_current_user_id() {
  global $user;
  $user_id = $user->uid;

  return $user_id;
}
