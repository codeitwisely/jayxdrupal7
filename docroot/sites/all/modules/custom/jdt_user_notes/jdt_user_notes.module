<?php
/**
 * @file
 * jdt_user_notes.module
 * This file includes hooks for permissions and other.
 */

/**
 * Implements hook_permission().
 */
function jdt_user_notes_permission() {
  return array(
    'view user notes' => array(
      'title' => t('View any user note'),
      'description' => t('View any published user notes.'),
    ),
    'add user notes' => array(
      'title' => t('Create new user note'),
      'description' => t('Add user notes.'),
    ),
    'edit own user notes' => array(
      'title' => t('Edit own user note'),
      'description' => t('Edit own user notes.'),
    ),
    'edit any user notes' => array(
      'title' => t('Edit any user note'),
      'description' => t('Edit any user notes.'),
    ),
    'delete own user notes' => array(
      'title' => t('Delete own user note'),
      'description' => t('Delete own user notes.'),
    ),
    'delete any user notes' => array(
      'title' => t('Delete any user note'),
      'description' => t('Delete any user notes.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function jdt_user_notes_menu() {
  $items['jdt-user-notes/%_jdt_user_notes_note/view'] = array(
    'title' => 'View a note',
    'page callback' => '_jdt_user_notes_note_view',
    'page arguments' => array(1),
    'access arguments' => array('view user notes'),
    'type' => MENU_CALLBACK,
  );
  $items['jdt-user-notes/%node/add'] = array(
    'title' => 'Add new note to an article',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_jdt_user_notes_form', 1),
    'access arguments' => array(1, 'add user notes'),
    'access callback' => '_jdt_user_notes_access_callback',
    'type' => MENU_CALLBACK,
  );
  $items['jdt-user-notes/%_jdt_user_notes_note/edit'] = array(
    'title' => 'Edit a note',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_jdt_user_notes_form', 1),
    'access arguments' => array(1, 'edit own user notes', 'edit any user notes'),
    'access callback' => '_jdt_user_notes_access_callback',
    'type' => MENU_CALLBACK,
  );
  $items['jdt-user-notes/%_jdt_user_notes_note/delete'] = array(
    'title' => 'Delete a note',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_jdt_user_notes_delete_form', 1),
    'access arguments' => array(1, 'delete own user notes', 'delete any user notes'),
    'access callback' => '_jdt_user_notes_access_callback',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Function to manage access permission to notes.
 *
 * @param $object_loaded
 *   The object loaded on the page can be a note or a node.
 * @param $permission
 *   The global permission such as edit own notes.
 * @param $super_permission
 *   The super permission such as edit any notes.
 * @return
 *   True or false.
 */
function _jdt_user_notes_access_callback($object_loaded, $permission, $super_permission) {
  $user_id = _jdt_user_notes_get_current_user_id();
  if ($user_id == 1 || user_access($super_permission)) {
    return TRUE;
  }

  // Object is a note.
  if (isset($object_loaded->author_uid)) {
    if ($object_loaded->author_uid == $user_id && user_access($permission)) {
      return TRUE;
    }
  }

  // Object is a node.
  if ($object_loaded->uid == $user_id && user_access($permission)) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Loader for getting notes in object format for a given note_id.
 *
 * @param $note_id
 *   The note_id to load.
 * @return
 *   Return result in object format.
 */
function _jdt_user_notes_note_load($note_id) {
  module_load_include('inc', 'jdt_user_notes', 'jdt_user_notes.crud');
  return _jdt_user_notes_select_note($note_id);
}

/**
 * Custom function to add a new user note to the database.
 *
 * @param $form
 *   The add note form.
 * @param $form_state
 *   The form elements available.
 * @param $object_loaded
 *   The object that we pass can be a note or a node.
 * @return
 *   The add note form for an article which nid is passed on the url.
 */
function _jdt_user_notes_form($form, &$form_state, $object_loaded) {
  $form['article_nid']['#type'] = 'value';
  $form['author_uid']['#type'] = 'value';
  $form['note_id']['#type'] = 'value';
  $form['note_text'] = array(
      '#type' => 'textarea',
      '#title' => t('Note text'),
      '#cols' => 60  ,
      '#rows' => 5,
      '#required' => TRUE,
  );
  if (isset($object_loaded->nid)) {
    $form['article_nid']['#value'] = $object_loaded->nid;
    $form['author_uid']['#value'] = _jdt_user_notes_get_current_user_id();
  }
  else {
    $form['note_id']['#value'] = $object_loaded->note_id;
    $form['article_nid']['#value'] = $object_loaded->article_nid;
    $form['author_uid']['#value'] = $object_loaded->author_uid;
    $form['note_text']['#default_value'] = $object_loaded->note_text;
  }
  // Now I add also a button.
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save note'),
  );
  return $form;
}

/**
 * Add the data to be insert or updated on the jdt user notes table.
 *
 * @param $form
 *   The add note form.
 * @param $form_state
 *   The form elements available.
 */
function _jdt_user_notes_form_submit($form, &$form_state) {
  module_load_include('inc', 'jdt_user_notes', 'jdt_user_notes.crud');
  $note_id = $form_state['values']['note_id'];
  $article_nid = $form_state['values']['article_nid'];
  $author_uid = $form_state['values']['author_uid'];
  $note_text = $form_state['values']['note_text'];
  $entry = array(
      'article_nid' => $article_nid,
      'author_uid' => $author_uid,
      'note_text' => $note_text
  );
  if (!($note_id)) {
    $create = _jdt_user_notes_create_note($entry);
    $form_state['redirect'] = '<front>';
    drupal_set_message(t('The note has been added'), 'status');
  }
  else {
    $entry['note_id'] = $note_id;
    $update = _jdt_user_notes_updt_note($entry);
    $form_state['redirect'] = '<front>';
    drupal_set_message(t('The note has been updated'), 'status');
  }
}

/**
 * We display the note_text field for a given note object passed in parameter.
 *
 * @param $note
 *   The note object.
 * @return
 *   The note_text field for the note_id passed in the url.
 */
function _jdt_user_notes_note_view($note) {
  $select = _jdt_user_notes_select_note($note->note_id);
  $header = array(t('Note text'));
  $row[] = array($select->note_text);
  $output = theme('table', array('header' => $header, 'rows' => $row));
  $output .= l(t('Edit Note'), 'jdt-user-notes/' . $note->note_id . '/edit');

  return $output;
}

/**
 * Return the form to delete a note which id is passed in the url.
 *
 * @param $form
 *   The delete note form.
 * @param $form_state
 *   The form elements available.
 * @param $note
 *   The note object.
 * @return
 *   Return the delete form form a note.
 */
function _jdt_user_notes_delete_form($form, &$form_state, $note) {
  $form['#item'] = $note;
  $form['header'] = array(
    '#markup' => t('Are you sure you wish to delete the note with the note_id <em>@value</em>?', array('@value' => $note->note_id)),
    '#prefix' => '<h2>',
    '#suffix' => '</h2>',
  );
  $form['warning'] = array(
    '#markup' => t('Warning, this action cannot be undone'),
    '#prefix' => '<p>',
    '#suffix' => '</p>',
  );
  $form['delete_button'] = array(
    '#type' => 'submit',
    '#value' => t('Delete note'),
  );
  return $form;
}

/**
 * This function is the handler on delete form submission.
 *
 * @param $form
 *   The delete note form.
 * @param $form_state
 *   The note form elements available.
 */
function _jdt_user_notes_delete_form_submit($form, &$form_state) {
  if ($form_state['values']['op'] == $form_state['values']['delete_button']) {
    $note = $form['#item'];
    $note_id = $note->note_id;
    module_load_include('inc', 'jdt_user_notes', 'jdt_user_notes.crud');
    _jdt_user_notes_del_note($note_id);
  }
  $form_state['redirect'] = '<front>';
  drupal_set_message(t('The note has been deleted'));
}

/**
 * Get the uid of the current user.
 *
 * @return
 *   Current user uid.
 */
function _jdt_user_notes_get_current_user_id() {
  global $user;
  $user_id = $user->uid;
  return $user_id;
}
