<?php
/**
 * @file
 * jdt_user_notes.module
 * This file includes hooks for permissions and other.
 */

/**
 * Implements hook_permission().
 * @return
 *   Array of permissions.
 */
function jdt_user_notes_permission() {
  return array(
    'view_jdt_user_notes' => array(
      'title' => t('View user note'),
      'description' => t('View user notes.'),
    ),
    'add_jdt_user_notes' => array(
      'title' => t('Create new user note'),
      'description' => t('Add user notes.'),
    ),
    'edit_own_jdt_user_notes' => array(
      'title' => t('Edit own user note'),
      'description' => t('Edit own user notes.'),
    ),
    'edit_any_jdt_user_notes' => array(
      'title' => t('Edit any user note'),
      'description' => t('Edit any user notes.'),
    ),
    'delete_own_jdt_user_notes' => array(
      'title' => t('Delete own user note'),
      'description' => t('Delete own user notes.'),
    ),
    'delete_any_jdt_user_notes' => array(
      'title' => t('Delete any user note'),
      'description' => t('Delete any user notes.'),
    ),
  );
}

/**
 * Implements hook_menu().
 * @return
 *   Array of items.
 */

function jdt_user_notes_menu() {
  $items['jdt_user_notes/summary'] = array(
    'title' => 'Displays all notes',
    'page callback' => '_jdt_user_notes_get_all_notes',
    'access arguments' => array('access page manager'),
    'expanded' => TRUE,
  );
  $items['jdt_user_notes/update'] = array(
    'title' => 'Update a note',
    'page callback' => 'drupal_get_form',
    'page_arguments' => array('_jdt_user_notes_form_definition'),
  );
  $items['jdt_user_notes/add'] = array(
    'title' => 'Add user note',
    'description' => 'Add a new user note',
    'page callback' => 'jdt_user_notes_block_view',
    'access arguments' => array('access page manager'),
    'expanded' => TRUE,
  );
  $items['jdt_user_notes/delete'] = array(
    'title' => 'Delete Note',
    'page callback' => '_jdt_user_notes_delete_note',
  );
  $items['note/%'] = array(
    'title' => 'Add a user note',
    'access_callback' => TRUE,
    'page callback' => 'drupal_get_form',
    'access arguments' => array('Create new user note'),
    'page_arguments' => array('jdt_user_notes_form_definition', 1),
  );
  $items['article/autocomplete'] = array(
    'title' => 'AutoComp Menu',
    'page callback' => '_jdt_user_notes_select_all_articles',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['user_un/autocomplete'] = array(
    'title' => 'AutoComp Menu',
    'page callback' => '_jdt_user_notes_all_users',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * BEGIN TEST with wildcard.
 */

/**
* Form definition. for updating a note.
*/
function _jdt_user_notes_form_definition($form, &$form_state, $nid) {
  global $user;
  $user_id = $user->uid;

  $default_value_note = jdt_user_notes_note_exists($nid, $user_id);
  $default_note_id = jdt_user_notes_note_id($nid, $user_id);
  $form['fieldset'] = array(
    '#type' => 'fieldset',
    '#title' => t('Note to Article'),
    '#default_value' => 'Hello',
  );
  $form['fieldset']['note_textfield'] = array(
    '#type' => 'textfield',
    '#title' => t('Note'),
    '#default_value' => $default_value_note,
  );

  // Grab value for node id and make it part of the form state.
  // so you can use it later.
  $form['nid'] = array(
    '#type' => 'value',
    '#value' => $nid,
  );

  // Make User ID available to the form.
  $form['uid'] = array(
    '#type' => 'value',
    '#value' => $user_id,
  );
  // Make User ID available to the form.
  $form['note_id'] = array(
    '#type' => 'value',
    '#value' => $default_note_id,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save Note'),
  );
  return $form;
}
/**
* Grab Note from the database.
*/
function jdt_user_notes_note_exists($nid, $uid) {
// Grab values from the database.
// Populate default value with the value stored.
// in the database.
  $result = db_select('jdt_user_notes', 'n')
    ->fields('n')
    ->condition('article_nid', $nid, "=")
    ->condition('author_uid', $uid, "=")
    ->execute()
    ->fetchAssoc();
  if (isset($result['note_text'])) {
    return $result['note_text'];
  }
  return '';
}
/**
* Grab Note Id from the database.
*/
function jdt_user_notes_note_id($nid, $uid) {
  $result = db_select('jdt_user_notes', 'n')
    ->fields('n')
    ->condition('article_nid', $nid, "=")
    ->condition('author_uid', $uid, "=")
    ->execute()
    ->fetchAssoc();
    return $result['note_id'];
  }
/**
 * Submit handler.
 */
function jdt_user_notes_form_definition_submit($form, &$form_state) {
  $values = $form_state['values'];
//dpm($values);
  $entry = array(
    'note_text' => $form_state['values']['note_textfield'],
    'author_uid' => $form_state['values']['uid'],
    'article_nid' => $form_state['values']['nid'],
    'note_id' => $form_state['values']['note_id'],
  );
  module_load_include('inc', 'jdt_user_notes', 'jdt_user_notes.crud');
  jdt_user_notes_updt($entry);
  drupal_set_message(t('Your note has been added'));
}

/**
 * FIN TESSST of update part
 */

/**
 * Function to select all the article titles.
 * @param
 *   String.
 */

function _jdt_user_notes_all_users($string) {

  $result = db_query("SELECT uid,name FROM {users} WHERE name LIKE '%$string%' AND status = 1");
  $matches = array();
  foreach ($result as $item) {
    $matches[$item->name . '[uid:' . $item->uid . ']'] = check_plain($item->name);
  }
  drupal_json_output($matches);
  exit;
}

/**
 * Function to select all the article titles.
 * @param
 *   String.
 */

function _jdt_user_notes_all_articles($string) {

  $result = db_query("SELECT nid,title FROM {node} WHERE title LIKE '%$string%' AND type ='article_1'");
  $matches = array();
  foreach ($result as $item) {
    $matches[$item->title . '[nid:' . $item->nid . ']'] = check_plain($item->title);
  }
  drupal_json_output($matches);
  exit;
}

/**
 * Implements hook_block_view().
 * @return
 *   Block.
 */

 function jdt_user_notes_block_view() {
  $form = drupal_get_form('_jdt_user_notes_add_form');
  $block = array(
    'content' => $form,
  );
  return $block;
}

/**
 * Get the name concatenated to the user id of the current user.
 * @return
 *   username and uid
 */
function _jdt_user_notes_get_current_user() {
  global $user;
  $user_id = $user->uid;
  $user_name = $user->name;
  $field_user = $user_name . '[uid:' . $user_id . ']';

  return $field_user;
}

/**
 * Custom function to add a new user note to the database.
 * @param
 *   $form.
 * @param
 *   $form_state.
 * @return
 *   Form.
 */

function _jdt_user_notes_add_form($form, &$form_state) {

  $form['article_nid'] = array(
    '#type' => 'textfield',
    '#title' => t('Article'),
    '#size' => 30,
    '#maxlength' => 100,
    '#autocomplete_path' => 'article/autocomplete',
    '#required' => TRUE,
  );

  $form['author_uid'] = array(
    '#type' => 'textfield',
    '#title' => t('Authored by'),
    '#size' => 30,
    '#maxlength' => 100,
    '#default_value' => _jdt_user_notes_get_current_user(),
    '#required' => TRUE,
    '#disabled' => TRUE,
  );

  $form['note_text'] = array(
      '#type' => 'textfield',
      '#title' => 'Note text',
      '#size' => 30,
      '#maxlength' => 100,
      '#required' => TRUE,
  );

  // now I add also a button
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Add user note'),
  );

  $form['#submit'][] = '_jdt_user_notes_submit_handler';
  return $form;
}

/**
 * @param
 *   $field.
 * @return
 *   Uid.
 */

function _jdt_user_notes_get_user_id($field) {
  preg_match('/\[uid:(\d+)\]/', $field, $matches);
  $uid = $matches[1];
  return $uid;
}

/**
 * @param
 *   $field.
 * @return
 *   Nid.
 */
function _jdt_user_notes_get_article_id($field) {
  preg_match('/\[nid:(\d+)\]/', $field, $matches);
  $nid = $matches[1];
  return $nid;
}

/**
 * Add the data to be insert on the table.
 * @param
 *   $form.
 * @param
 *   $form_state.
 */

function _jdt_user_notes_submit_handler($form, &$form_state) {

  $error = 1;
    if ( !isset($form_state['values']['note_text']) || $form_state['values']['note_text'] > 0) {
    $error = 0 ;
  }

  if ($error) {
    $article_id = _jdt_user_notes_get_article_id($form_state['values']['article_nid']);
    $author_id = _jdt_user_notes_get_user_id($form_state['values']['author_uid']);
    $text = $form_state['values']['note_text'];
    $entry = array(
        'article_nid' => $article_id,
        'author_uid' => $author_id,
        'note_text' => $text,
    );
    module_load_include('inc', 'jdt_user_notes', 'jdt_user_notes.crud');
    $add = _jdt_user_notes_create($entry);

    if ($add) {
      drupal_set_message(t('Note has been added!'));
      drupal_goto('<front>');
    }
    else {
      drupal_set_message(t('Record can\'t be added!'), 'warning');
    }
  }
}

function _jdt_user_notes_get_all_notes($type = 'article_1') {
  $result = db_query('SELECT jun.note_id, n.title, u.name, jun.note_text
    FROM jdt_user_notes jun
    INNER JOIN node n ON jun.article_nid = n.nid
    INNER JOIN users u ON jun.author_uid = u.uid
    WHERE n.type = :type', array(':type' => $type));

  $rows = array();
  $i=0;
  foreach ($result as $record) {
    $rows[] = array_map('check_plain', (array)$record);
    //Make some hyperlinks for editing and deleting
    $rows[$i]['edit'] = l(t('Edit'), 'jdt_user_notes/update', array('query' => array('note_id' => $rows[$i]['note_id'])));
    $rows[$i]['delete'] = l(t('Delete'), 'jdt_user_notes/delete', array('query' => array('note_id' => $rows[$i]['note_id'])));
    $i++;
  }
  $header = array(t('Note Id'), t('Article'), t('Author'), t('Note text'), t('Edit'), t('Delete'));
  $output = theme('table', array('header' => $header, 'rows' => $rows));
  $output .= l(t('Add Note'), 'jdt_user_notes/add');

  return $output;
}

function _jdt_user_notes_delete_note($note) {
  $note = $_GET['note_id'];
  module_load_include('inc', 'jdt_user_notes', 'jdt_user_notes.crud');
  $deleting = _jdt_user_notes_del($note);
  if ($deleting) {
    drupal_set_message(t('Note has been deleted!'), 'status');
    drupal_goto('jdt_user_notes/summary');
  }
  else {
      drupal_set_message(t('Note can\'t be deleted!'), 'warning');
    }
}
