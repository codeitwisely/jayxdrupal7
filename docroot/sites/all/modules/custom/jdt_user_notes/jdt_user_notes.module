<?php
/**
 * @file
 * jdt_user_notes.module
 * This file includes hooks for permissions and other.
 */

/**
 * Implements hook_permission().
 */
function jdt_user_notes_permission() {
  return array(
    'view user notes' => array(
      'title' => t('View any user note'),
      'description' => t('View any published user notes.'),
    ),
    'add user notes' => array(
      'title' => t('Create new user note'),
      'description' => t('Add user notes.'),
    ),
    'edit own user notes' => array(
      'title' => t('Edit own user note'),
      'description' => t('Edit own user notes.'),
    ),
    'edit any user notes' => array(
      'title' => t('Edit any user note'),
      'description' => t('Edit any user notes.'),
    ),
    'delete own user notes' => array(
      'title' => t('Delete own user note'),
      'description' => t('Delete own user notes.'),
    ),
    'delete any user notes' => array(
      'title' => t('Delete any user note'),
      'description' => t('Delete any user notes.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function jdt_user_notes_menu() {
  $items['jdt-user-notes/%jdt_user_notes_note/view'] = array(
    'title' => 'View a note',
    'page callback' => 'jdt_user_notes_note_view',
    'page arguments' => array(1),
    'access arguments' => array('view user notes'),
    'type' => MENU_CALLBACK,
  );
  $items['jdt-user-notes/%node/add'] = array(
    'title' => 'Add new note to an article',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('jdt_user_notes_note_form', 1),
    'access arguments' => array('add user notes'),
    'modal' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['jdt-user-notes/%jdt_user_notes_note/edit'] = array(
    'title' => 'Edit a note',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('jdt_user_notes_note_form', 1),
    'access arguments' => array(1, 'edit own user notes', 'edit any user notes'),
    'access callback' => '_jdt_user_notes_access_callback',
    'modal' => TRUE,
    'modal' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['jdt-user-notes/%jdt_user_notes_note/delete'] = array(
    'title' => 'Delete a note',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('jdt_user_notes_delete_form', 1),
    'access arguments' => array(
      1,
      'delete own user notes',
      'delete any user notes',
    ),
    'access callback' => 'jdt_user_notes_access_callback',
    'type' => MENU_CALLBACK,
  );
  $items['node/%node/notes'] = array(
    'title' => 'My Notes',
    'description' => 'Display notes related to an article',
    'page callback' => 'jdt_user_notes_display_notes',
    'page arguments' => array(1),
    'access callback' => 'jdt_user_notes_get_notes',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );
  $items['jdt-user-notes/%ctools_js'] = array(
    'page callback' => 'jdt_user_notes_callback',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['modal/page'] = array(
    'page callback' => 'jdt_user_notes_page',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Access callback.
 *
 * Manage access permissions to notes.
 *
 * @param object $object_loaded
 *   The object loaded on the page can be a note or a node.
 * @param string $permission
 *   The global permission such as edit own notes.
 * @param string $super_permission
 *   The super permission such as edit any notes.
 *
 * @return bool
 *   True or false.
 */
function jdt_user_notes_access_callback($object_loaded, $permission, $super_permission) {
  if (user_access($super_permission)) {
    return TRUE;
  }

  $user_id = jdt_user_notes_get_current_user_id();
  // Object is a note.
  if (isset($object_loaded->author_uid)) {
    if ($object_loaded->author_uid == $user_id && user_access($permission)) {
      return TRUE;
    }
  }

  // Object is a node.
  if ($object_loaded->uid == $user_id && user_access($permission)) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Loader for getting notes in object format for a given note_id.
 *
 * @param int $note_id
 *   The note_id to load.
 *
 * @return object
 *   Return result in object format.
 */
function jdt_user_notes_note_load($note_id) {
  module_load_include('inc', 'jdt_user_notes', 'jdt_user_notes.crud');
  return _jdt_user_notes_select_note($note_id);
}

/**
 * Page callback.
 *
 * Add/edit form for a user note.
 *
 * @param object $form
 *   The add note form.
 * @param object $form_state
 *   The form elements available.
 * @param object $node
 *   The object pass can be a node.
 * @param object $note
 *   The object passed can be a note.
 *
 * @return object
 *   The add/edit note form for an article which nid is passed on the url.
 */
function jdt_user_notes_note_form($form, &$form_state, $node = NULL, $note = NULL) {
  $form['article_nid']['#type'] = 'value';
  $form['author_uid']['#type'] = 'value';
  $form['note_id']['#type'] = 'value';
  $form['note_text'] = array(
    '#type' => 'textarea',
    '#title' => t('Note text'),
    '#cols' => 60  ,
    '#rows' => 5,
    '#required' => TRUE,
  );

  // It's a node.
  if (isset($node->nid)) {
    $form['article_nid']['#value'] = $node->nid;
    $form['author_uid']['#value'] = jdt_user_notes_get_current_user_id();
  }
  // It's a note.
  else {
    $note = $node;
    $form['note_id']['#value'] = $note[0]->note_id;
    $form['article_nid']['#value'] = $note[0]->article_nid;
    $form['author_uid']['#value'] = $note[0]->author_uid;
    $form['note_text']['#default_value'] = $note[0]->note_text;
  }
  // Now I add also a button.
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save note'),
  );
  return $form;
}

/**
 * Add the data to be insert or updated on the jdt user notes table.
 *
 * @param object $form
 *   The add note form.
 * @param object $form_state
 *   The form elements available.
 */
function jdt_user_notes_note_form_submit($form, &$form_state) {
  module_load_include('inc', 'jdt_user_notes', 'jdt_user_notes.crud');
  $values = $form_state['values'];
  $entry = array(
    'article_nid' => $values['article_nid'],
    'author_uid' => $values['author_uid'],
    'note_text' => check_plain($values['note_text']),
  );
  if (!$values['note_id']) {
    $create = _jdt_user_notes_create_note($entry);
    $message = t('The note has been added');
    $destination_redirect = $create;
  }
  else {
    $entry['note_id'] = $values['note_id'];
    $update = _jdt_user_notes_updt_note($entry);
    $message = t('The note has been added');
    $destination_redirect = $entry['note_id'];
  }
  $form_state['redirect'] = 'jdt-user-notes/' . $destination_redirect . '/view';
  drupal_set_message(check_plain($message), 'status');
}

/**
 * Page callback.
 *
 * Display the note_text field for a given note object passed in parameter.
 *
 * @param object $note
 *   The note object.
 *
 * @return table
 *   The note_text field for the note passed in the url.
 */
function jdt_user_notes_note_view($note) {
  $select = _jdt_user_notes_select_note($note[0]->note_id);
  $header = array(t('Note text'));
  $row[] = array($select[0]->note_text);
  $output = theme('table', array('header' => $header, 'rows' => $row));
  $output .= l(t('Edit Note'), 'jdt-user-notes/' . $note[0]->note_id . '/edit');
  $output .= '<br />';
  $output .= l(t('Delete Note'), 'jdt-user-notes/' . $note[0]->note_id . '/delete');

  return $output;
}

/**
 * Display the form to delete a note which id is passed in the url.
 *
 * @param object $form
 *   The delete note form.
 * @param object $form_state
 *   The form elements available.
 * @param object $note
 *   The note object.
 *
 * @return object
 *   The delete form for a note.
 */
function jdt_user_notes_delete_form($form, &$form_state, $note) {
  $form['#item'] = $note;
  $form['header'] = array(
    '#markup' => t('Are you sure you wish to delete the note with the note_id <em>@value</em>?', array('@value' => $note->note_id)),
    '#prefix' => '<h2>',
    '#suffix' => '</h2>',
  );
  $form['warning'] = array(
    '#markup' => t('Warning, this action cannot be undone'),
    '#prefix' => '<p>',
    '#suffix' => '</p>',
  );
  $form['delete_button'] = array(
    '#type' => 'submit',
    '#value' => t('Delete note'),
  );
  return $form;
}

/**
 * The handler on delete form submission.
 *
 * @param object $form
 *   The delete note form.
 * @param object $form_state
 *   The note form elements available.
 */
function jdt_user_notes_delete_form_submit($form, &$form_state) {
  if ($form_state['values']['op'] == $form_state['values']['delete_button']) {
    $note = $form['#item'];
    $note_id = $note->note_id;
    module_load_include('inc', 'jdt_user_notes', 'jdt_user_notes.crud');
    _jdt_user_notes_del_note($note_id);
  }
  $form_state['redirect'] = '<front>';
  drupal_set_message(t('The note has been deleted'));
}

/**
 * Get the uid of the current user.
 *
 * @return int
 *   Current user uid.
 */
function jdt_user_notes_get_current_user_id() {
  global $user;
  $user_id = $user->uid;
  return $user_id;
}

/**
 * Task 21.
 * Task 21.
 */

/**
 * Implements hook_theme().
 */
function jdt_user_notes_theme() {
  return array(
  // Placeholders to hold initial values.
    'jdt_user_notes' => array(
      'variables' => array(
        'notes' => FALSE,
        'node_title' => FALSE,
        'node_author' => FALSE,
        'node' => FALSE,
        'edit' => FALSE,
      ),
      'template' => 'theme/jdt-user-notes',
    ),
  );
}

/**
 * Display notes for an article.
 *
 * @param object $node
 *   The node object for which we want to display notes.
 *
 * @return array
 *   An array with the node object passed.
 */
function jdt_user_notes_display_notes($node) {
  return array(
    '#theme' => 'jdt_user_notes',
    '#node' => $node,
  );
}

/**
 * Create a tab for notes only if notes exist for a given article.
 *
 * @param object $node
 *   The node object that we want to get.
 *
 * @return bool
 *   True if there is notes for an article or false.
 */
function jdt_user_notes_get_notes($node) {
  module_load_include('inc', 'jdt_user_notes', 'jdt_user_notes.crud');
  $current_user_uid = jdt_user_notes_get_current_user_id();
  return _jdt_user_notes_select_note(NULL, $node->nid, $current_user_uid);
}

/**
 * Implements template_preprocess_THEMEHOOK().
 */
function template_preprocess_jdt_user_notes(&$variables) {
  $node = $variables['node'];
  $current_user_uid = jdt_user_notes_get_current_user_id();
  $variables['node_title'] = $node->title;
  $variables['node_author'] = $node->name;
  $variables['notes'] = _jdt_user_notes_select_note(NULL, $node->nid, $current_user_uid);
  $variables['edit'] = jdt_user_notes_make_link($link_text = '');
}

/**
 * Task 24
 */

/**
 * Helper function to make a link.
 *
 * @param string $link_text
 *   The link that we will put.
 *
 * @return string
 *   A link who will fire the popup.
 */
function jdt_user_notes_make_link($link_text = '') {
  ctools_include('modal');
  ctools_modal_add_js();
  // Set a default value if no text in supplied.
  if (empty($link_text)) {
    $link_text = 'Edit note';
  }
  return ' ' . l($link_text, 'jdt-user-notes/nojs', array('attributes' => array('class' => 'ctools-use-modal'))) . ' ';
}

/**
 * Page callback.
 *
 * An example page.
 *
 * @return string
 *   The page callback(the the link).
 */
function jdt_user_notes_page() {
  // Load the modal library and add the modal javascript.
  ctools_include('modal');
  ctools_modal_add_js();
  return jdt_user_notes_make_link('Magical modal');
}

/**
 * Ajax menu callback.
 *
 * @param string $ajax
 *   If we want to use ajax.
 *
 * @return object.
 *   The Add/edit note form.
 */
function jdt_user_notes_callback($ajax) {
  if ($ajax) {
    ctools_include('ajax');
    ctools_include('modal');
    $form_state = array(
      'ajax' => TRUE,
      'title' => t('Add/Edit a note'),
    );
    // Use ctools to generate ajax instructions for the browser to create,
    // a form in a modal popup.
    $output = ctools_modal_form_wrapper('jdt_user_notes_note_form', $form_state);
    // If the form has been submitted, there may be additional instructions,
    // such as dismissing the modal popup.
    if (!empty($form_state['ajax_commands'])) {
      $output = $form_state['ajax_commands'];
    }
    // Return the ajax instructions to the browser via ajax_render().
    print ajax_render($output);
    drupal_exit();
  }
  else {
    return drupal_get_form('jdt_user_notes_note_form');
  }
}

/**
 * Implements hook_node_view_alter().
 */
function jdt_user_notes_node_view_alter(&$build) {
  $nid = $build['body']['#object']->nid;
  if ($build['body']['#object']->type = 'article_1') {
    // Add your own custom link.
    $build['links']['node']['#links']['add'] = array(
      'title' => t('Add a note to this article'),
      'href' => 'jdt-user-notes/' . $nid . '/add',
      'html' => TRUE,
      'attributes' => array(
        'title' => 'Test link',
      ),
    );
  }
}
